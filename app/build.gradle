import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'
def getVersionCode() {
    def versionFile = file('version.properties')
    if (versionFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['VERSION_CODE'].toInteger()
        def runTasks = gradle.startParameter.taskNames //仅在assembleRelease任务是增加版本号,其他渠道包在此分别配置
        if ('assembleInsect' in runTasks) {
            versionProps['VERSION_CODE'] = (++versionCode).toString()
            versionProps.store(versionFile.newWriter(), null)
        }
        return versionCode
    } else {
       // throw new GradleException("Could not find version.properties!")
    }
}
android {
    compileSdkVersion 22
    buildToolsVersion '26.0.2'
    def currentVersionCode = getVersionCode()

    repositories {
        flatDir {
            dirs 'libs'
        }
    }
    defaultConfig {
        applicationId "com.block.poker"
        minSdkVersion 15
        targetSdkVersion PROP_TARGET_SDK_VERSION
       // versionCode 1
        versionName "1.0"
        //修改 verisoncode 为自动增加
        versionCode currentVersionCode

        //增加
        manifestPlaceholders = [
                channel    : "5", // 渠道 0 android 国内
                build_type : "debug", // debug release
                hard_update: "true",  // false true
                hot_update : "true",
        ]
        externalNativeBuild {
            ndkBuild {
                if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                    // skip the NDK Build step if PROP_NDK_MODE is none
                    targets 'cocos2djs'
                    arguments 'NDK_TOOLCHAIN_VERSION=4.9'
                    arguments 'APP_PLATFORM=android-'+PROP_TARGET_SDK_VERSION
                    
                    def module_paths = [project.file("C:/CocosCreator/resources/cocos2d-x"),
                                        project.file("C:/CocosCreator/resources/cocos2d-x/cocos"),
                                        project.file("C:/CocosCreator/resources/cocos2d-x/external")]
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    }
                    else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }

                    arguments '-j' + Runtime.runtime.availableProcessors()
                    abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
                }
            }
        }
    }

    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifest.xml"
    }

    externalNativeBuild {
        ndkBuild {
            if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                // skip the NDK Build step if PROP_NDK_MODE is none
                path "jni/Android.mk"
            }
        }
    }

    signingConfigs {

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }
        }

        debug {
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
        }
    }
}

android.applicationVariants.all { variant ->
    // delete previous files first
    delete "${buildDir}/intermediates/assets/${variant.dirName}"

    variant.mergeAssets.doLast {
        copy {
           from "${buildDir}/../../../../../res"
           into "${buildDir}/intermediates/assets/${variant.dirName}/res"
        }

        copy {
            from "${buildDir}/../../../../../src"
            into "${buildDir}/intermediates/assets/${variant.dirName}/src"
        }

        copy {
            from "${buildDir}/../../../../../main.js"
            from "${buildDir}/../../../../../project.json"
            into "${buildDir}/intermediates/assets/${variant.dirName}"
        }

        copy {
            from "C:/CocosCreator/resources/cocos2d-x/cocos/scripting/js-bindings/script"
            into "${buildDir}/intermediates/assets/${variant.dirName}/script"
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':libcocos2dx')
    //增加内容
    compile(name: 'libgopus-release', ext: 'aar')
    compile(name: 'libcrop', ext: 'aar')

    compile 'com.android.support:multidex:1.0.2'
    compile project(':weixin_imsdk')
    //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.2.0
//    compile 'com.android.support:support-vector-drawable:26.0.0-alpha1'
//    compile 'com.android.support:design:26.0.0-alpha1'
  //  compile 'com.android.support:appcompat-v7:26.0.0-alpha1'

//    compile files('libs/SaaS_GameAnalytics_Android_SDK_V4.0.9.jar')
//    compile files('libs/bugly_crash_release.jar')
}
